#Import the needed packages for this experiment

library("BiocManager")
library("tximport")
library("edgeR")
library("VennDiagram")


# Create an object containing all the files found in the directory "differential_gene_expression"

dir <- "differential_gene_expression/"
list.files(dir)


# Create an object containing every salmon file by reading "samples.txt"

samples <- read.table(file.path(dir,"samples_.txt"), header=TRUE)


# Create an object containing every "quant.sf" needed in this experiment

files <- file.path(dir, "salmon", samples$sample_name, "quant.sf")


#Rename (if needed) the column depending on the sample type

column<- c("VIR","VIR","VIR","VIR","VIR","VIR","vir","vir","vir","vir","vir","vir")
names(files) <- paste0(column,1:12)


#Verify that all the needed files are present in the object "files" (should come up with TRUE)

all(file.exists(files))


#Import the GenomicFeatures package part of the tximport package

library("GenomicFeatures")


#Create a txdb object using the most up to date TAIR genome annotation (here, Araport11)

txdb <- makeTxDbFromGFF("Araport11_GFF3_genes_transposons.gff",format="gff")


#Summarize the transcript abundance up to the gene level

k <- keys(txdb, keytype= "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
head(tx2gene)


#Generate the abundance, counts and lengths of each gene for each replicate

txi <- tximport(files, type = "salmon", tx2gene = tx2gene)
names(txi)
head(txi$counts)


#Verification step (last command should come out as TRUE)

txi.tx <- tximport(files, type="salmon", txOut=TRUE)
txi.sum <- summarizeToGene(txi.tx, tx2gene)
all.equal(txi$counts, txi.sum$counts)


##Creation of objects needed during the data normalisation step

cts <- txi$counts
normMat <- txi$length


#Normalisation step

normMat <- normMat/exp(rowMeans(log(normMat)))
normCts <- cts/normMat
eff.lib <- calcNormFactors(normCts) * colSums(normCts)
normMat <- sweep(normMat, 2, eff.lib, "*")
normMat <- log(normMat)


#Creation of DGE list from the gene counts and filtering step

y <- DGEList(cts)
y$samples$group <- paste0(samples$sample_type)
y <- scaleOffset(y, normMat)
keep <- filterByExpr(y)
y <- y[keep,]
names(y)


#Two different visualisations of the data (BCV and MDS plots)

plotMDS(y, method="bcv")
plotMDS(y)


#Create a design model matrix for generalised linear model (GLM) fit

design <- model.matrix(~ y$samples$group, y$samples)


#Calculate the normalisation factors to estimate dispersion (common, trended and tagwise)

y <- calcNormFactors(y)
y <- estimateDisp(y, design)


# Biological coefficient of variation (BCV) plot

plotBCV(y)


#Fit the data to the design matrix following a generalised linear model and determine the top 10 tags

fit <- glmFit(y, design)
lrt <- glmLRT(fit, coef=ncol(design))
tt <- topTags(lrt)


#Create an object containing all the differentially expressed genes according to Likelihood-ratio test (LRT) (number will come out the 2nd command)

resLRT <- topTags(lrt, n = nrow(y$counts))
nrow(resLRT$table)


#Create an object containing all the significantly differentially expressed genes (number will come out the 3rd command)

selectedLRT <- resLRT$table$FDR < 0.05
selectedLRT <- resLRT$table[selectedLRT, ]
nrow(selectedLRT)


#Create two objects individually containing all the significantly down- and up- regulated genes (numbers will come out of 3rd and 4th commands respectively)
UpregulatedLRT <-selectedLRT[selectedLRT$logFC > 0,]
DownregulatedLRT <- selectedLRT[selectedLRT$logFC < 0,]
nrow(UpregulatedLRT)
nrow(DownregulatedLRT)


#Use decideTestDGE to determine how many genes are down-, up- or not differentially regulated

dTDLRT <- decideTestsDGE(lrt, adjust.method="BH", p.value=0.05)
summary (dTDLRT)


#Creation of an object containing all differentially expressed genes according to the Exact Test

dgeExactTest <- exactTest(y)


#Create an object containing all the differentially expressed genes according to Exact Test (number will come out the 2nd command)

resExactTest <- topTags(dgeExactTest, n = nrow(dgeExactTest$table))
nrow(resExactTest)


#Compare raw p-values to adjusted p-values for one gene (picked randomly) across all the replicates

par(mfrow = c(1,2))
hist(resExactTest$table$PValue, xlab = "p-value", main = "raw p-values")
hist(resExactTest$table$FDR, xlab = "p-value", main = "adjusted p-values")


#Create an object containing all the significantly differentially expressed genes (number will come out the 3rd command)

selectedET <- resExactTest$table$FDR < 0.05
selectedET <- resExactTest$table[selectedET, ]
nrow(selectedET)


#Create two objects individually containing all the significantly down- and up- regulated genes (numbers will come out of 3rd and 4th commands respectively)

UpregulatedET <-selectedET[selectedET$logFC > 0,]
DownregulatedET <- selectedET[selectedET$logFC < 0,]
nrow(UpregulatedET)
nrow(DownregulatedET)


#Use decideTestDGE to determine how many genes are down-, up- or not differentially regulated

dTD_ET <- decideTestsDGE(dgeExactTest, adjust.method="BH", p.value=0.05)
summary (dTD_ET)


#Create an object to visualize intersection between DGE gene results between GLM-Likelihood-ratio Test and Exact Test through Venn-diagram

vd <- venn.diagram(x = list("Exact test" = rownames(selectedET),"GLM" = rownames(selectedLRT)), label.col=c("red","black","red"), cat.col="red",filename = NULL)
grid.draw(vd)
dev.print(jpeg,"vennd.jpeg")


#Produce an MA plot with down- and up- regulated genes colored in light green (using GLM-LRT DGE analysis results)

gene_list <- as.vector(rownames(selectedLRT)) 
maPlot( x=resLRT, y=selectedLRT, logAbundance=resLRT$table$logCPM, logFC=resLRT$table$logFC,de.tags=rownames(selectedLRT),xlab="mean of normalized counts",ylab="log fold change",col=NULL, smooth.scatter=FALSE)
with(subset(selectedLRT, rownames(selectedLRT) %in% gene_list), points(selectedLRT$logCPM, selectedLRT$logFC, pch=20, col="light green"))

