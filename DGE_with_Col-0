#Import the needed packages for this experiment

library("BiocManager")
library("tximport")
library("edgeR")


# Create an object containing all the files found in the directory "differential_gene_expression"

dir <- "differential_gene_expression/"
list.files(dir)


# Create an object containing every salmon file by reading "samples.txt"

samples <- read.table(file.path(dir,"samples_.txt"), header=TRUE)


# Create an object containing every "quant.sf" needed in this experiment

files <- file.path(dir, "salmon", samples$sample_name, "quant.sf")


#Rename (if needed) the column depending on the sample type

column<- c("VIR","VIR","VIR","VIR","VIR","VIR","vir","vir","vir","vir","vir","vir","Col","Col","Col","Col","Col","Col")
names(files) <- paste0(column,1:18)


#Verify that all the needed files are present in the object "files" (should come up with TRUE)

all(file.exists(files))


#Import the GenomicFeatures package part of the tximport package

library("GenomicFeatures")


#Create a txdb object using the most up to date TAIR genome annotation (here, Araport11)

txdb <- makeTxDbFromGFF("Araport11_GFF3_genes_transposons.gff",format="gff")


#Summarize the transcript abundance up to the gene level

k <- keys(txdb, keytype= "TXNAME")
tx2gene <- select(txdb, k, "GENEID", "TXNAME")
head(tx2gene)


#Generate the abundance, counts and lengths of each gene for each replicate

txi <- tximport(files, type = "salmon", tx2gene = tx2gene)
names(txi)
head(txi$counts)


#Verification step (last command should come out as TRUE)

txi.tx <- tximport(files, type="salmon", txOut=TRUE)
txi.sum <- summarizeToGene(txi.tx, tx2gene)
all.equal(txi$counts, txi.sum$counts)


#Creation of objects needed during the data normalisation  step

cts <- txi$counts
normMat <- txi$length


#Normalisation step

normMat <- normMat/exp(rowMeans(log(normMat)))
normCts <- cts/normMat
eff.lib <- calcNormFactors(normCts) * colSums(normCts)
normMat <- sweep(normMat, 2, eff.lib, "*")
normMat <- log(normMat)


#Creation of DGE list from the gene counts and filtering stage

y <- DGEList(cts)
y$samples$group <- paste0(samples$sample_type)
y <- scaleOffset(y, normMat)
keep <- filterByExpr(y)
y <- y[keep,]
head(y)


#Two different visualisation of the data (BCV and MDS plots)

plotMDS(y, method="bcv")
plotMDS(y)


#Create a design model matrix 

design <- model.matrix(~ y$samples$group, y$samples)


#Calculate the normalisation factors to estimate dispersion (common, trended and tagwise)

y <- calcNormFactors(y)
y <- estimateDisp(y, design)


#Fit the data to the design matrix following a generalised linear model and determine the top 10 tags
fit <- glmFit(y, design)
lrt <- glmLRT(fit, coef=ncol(design))
tt <- topTags(lrt)
tt

#Create objects containing all the down- and up- regulated genes

Upregulated <- tt[tt$table$logFC > 0,]
Downregulated <- tt[tt$table$logFC < 0,]


#Use decideTestDGE to determine how many genes are down-, up- or not differentially regulated

dTD <- decideTestsDGE(lrt, adjust.method="BH", p.value=0.05)
summary (dTD)

