library("BiocManager")

library("tximport")

library("edgeR")

Bioconductor version 3.10 (BiocManager 1.30.9), ?BiocManager::install for help
Loading required package: limma

dir <- "differential_expression/"

list.files(dir)

    'DGE_rerun.ipynb'
    'DGE.ipynb'
    'DGEplots'
    'salmon'
    'samples_.txt'
    'samples.txt'
    'vir1_vs_VIR_GFP.tsv'

samples <- read.table(file.path(dir,"samples_.txt"), header=TRUE)

files <- file.path(dir, "salmon", samples$sample_name, "quant.sf")

column<- c("VIR","VIR","VIR","VIR","VIR","VIR","vir","vir","vir","vir","vir","vir","Col","Col","Col","Col","Col","Col")

names(files) <- paste0(column,1:18)

all(file.exists(files))

TRUE

BiocManager::install("tximport")

library("tximport")

library("GenomicFeatures")

Bioconductor version 3.10 (BiocManager 1.30.9), R 3.6.1 (2019-07-05)
Installing package(s) 'tximport'
Updating HTML index of packages in '.Library'
Making 'packages.html' ... done
Old packages: 'BiocFileCache', 'farver', 'KEGGREST', 'KernSmooth', 'mgcv',
  'nlme', 'R6', 'Rcpp', 'Rsamtools', 'survival'
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:limma’:

    plotMA

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

txdb <- makeTxDbFromGFF("Araport11_GFF3_genes_transposons.gff",format="gff")

Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... Warning message in .get_cds_IDX(mcols0$type, mcols0$phase):
“The "phase" metadata column contains non-NA values for features of type
  exon. This information was ignored.”OK

k <- keys(txdb, keytype= "TXNAME")

tx2gene <- select(txdb, k, "GENEID", "TXNAME")

head(tx2gene)

'select()' returned 1:1 mapping between keys and columns

A data.frame: 6 × 2 TXNAME	GENEID
<chr>	<chr>
AT1G01010.1	AT1G01010
AT1G03987.1	AT1G03987
AT1G01040.1	AT1G01040
AT1G01040.2	AT1G01040
ath-MIR838 	AT1G01046
ath-miR838 	NA

txi <- tximport(files, type = "salmon", tx2gene = tx2gene)

names(txi)

head(txi$counts)

reading in files with read.delim (install 'readr' package for speed up)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 
transcripts missing from tx2gene: 316
summarizing abundance
summarizing counts
summarizing length

    'abundance'
    'counts'
    'length'
    'countsFromAbundance'

A matrix: 6 × 18 of type dbl 	VIR1	VIR2	VIR3	VIR4	VIR5	VIR6	vir7	vir8	vir9	vir10	vir11	vir12	Col13	Col14	Col15	Col16	Col17	Col18
AT1G01010	81	76.000	65	114.000	106.000	63	117.000	105.000	259.000	171	107.000	344	236.000	114	116.000	148.000	62.000	222.000
AT1G01020	472	328.000	222	279.000	301.001	213	223.999	191.001	474.000	283	233.001	767	648.000	285	381.000	435.000	438.999	379.001
AT1G01030	207	119.000	76	137.000	134.000	114	253.000	153.000	421.000	265	211.000	424	278.000	150	189.000	206.000	121.000	256.000
AT1G01040	814	575.000	619	939.000	617.000	581	1126.000	814.000	2399.000	1214	982.000	3140	1573.000	819	951.000	1249.000	656.000	2187.000
AT1G01050	1160	1003.000	866	1016.000	985.000	737	601.000	591.000	1380.000	836	651.000	1981	2152.000	1200	1528.000	1813.000	1097.000	2072.000
AT1G01060	2124	1686.001	1975	2726.001	1812.000	1381	1902.000	1465.001	5000.001	2122	1793.000	5720	7525.001	2861	2937.999	3983.001	2346.000	5368.001

txi.tx <- tximport(files, type="salmon", txOut=TRUE)

reading in files with read.delim (install 'readr' package for speed up)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 

txi.sum <- summarizeToGene(txi.tx, tx2gene)

all.equal(txi$counts, txi.sum$counts)

transcripts missing from tx2gene: 316
summarizing abundance
summarizing counts
summarizing length

TRUE

cts <- txi$counts

normMat <- txi$length

normMat <- normMat/exp(rowMeans(log(normMat)))

normCts <- cts/normMat

eff.lib <- calcNormFactors(normCts) * colSums(normCts)

normMat <- sweep(normMat, 2, eff.lib, "*")

normMat <- log(normMat)

y <- DGEList(cts)

y$samples$group <- paste0(samples$sample_type)

y <- scaleOffset(y, normMat)

keep <- filterByExpr(y)

y <- y[keep,]

names(y)

    'counts'
    'samples'
    'offset'

plotMDS(y, method="bcv")

plotMDS(y)

design <- model.matrix(~ y$samples$group, y$samples)

y <- calcNormFactors(y)

y <- estimateDisp(y, design)

fit <- glmFit(y, design)

lrt <- glmLRT(fit, coef=ncol(design))

tt <- topTags(lrt)

Upregulated <- tt[tt$table$logFC > 0,]

Downregulated <- tt[tt$table$logFC < 0,]

Upregulated

Downregulated

$table
    A data.frame: 5 × 5 	logFC	logCPM	LR	PValue	FDR
    	<dbl>	<dbl>	<dbl>	<dbl>	<dbl>
    AT3G05685	4.465412	3.5493843	496.94994	4.381326e-110	9.017646e-106
    AT2G06995	3.115802	0.2636031	72.47549	1.691191e-17	4.972585e-14
    AT1G06957	8.545267	-0.3489362	68.57707	1.220145e-16	3.139127e-13
    AT1G32960	3.759372	2.7479085	63.84329	1.347204e-15	3.080905e-12
    AT2G15042	1.989400	1.7053393	63.07145	1.993431e-15	4.102880e-12
$adjust.method
    'BH'
$comparison
    'y𝑠𝑎𝑚𝑝𝑙𝑒𝑠

    groupVIR'
$test
    'glm'

$table
    A data.frame: 5 × 5 	logFC	logCPM	LR	PValue	FDR
    	<dbl>	<dbl>	<dbl>	<dbl>	<dbl>
    AT1G27480	-1.7129168	4.795119	164.88923	9.671810e-38	9.953260e-34
    AT1G64630	-7.9101156	3.245972	142.46636	7.689722e-33	5.275662e-29
    AT4G34480	-1.3730519	4.997771	105.54438	9.279631e-25	4.774834e-21
    AT1G66260	-0.9744652	6.242999	92.33265	7.326538e-22	3.015896e-18
    AT3G48200	-1.1207622	6.672330	83.49834	6.376945e-20	2.187505e-16
$adjust.method
    'BH'
$comparison
    'y𝑠𝑎𝑚𝑝𝑙𝑒𝑠

    groupVIR'
$test
    'glm'

de1 <- decideTestsDGE(lrt, adjust.method="BH", p.value=0.05)

summary (de1)

       y$samples$groupVIR
Down                  543
NotSig              19424
Up                    615
