library("BiocManager")

library("tximport")

dir <- "differential_expression/"

list.files(dir)

 

samples <- read.table(file.path(dir,"samples.txt~"), header=TRUE)
samples


files <- file.path(dir, "salmon", samples$sample_name, "quant.sf")
column<- c("VIR","VIR","VIR","VIR","VIR","VIR","vir","vir","vir","vir","vir","vir")

names(files) <- paste0(column,1:12)
files



txi <- tximport(files, type="salmon", txOut=TRUE, countsFromAbundance="scaledTPM")
cts <- txi$counts
cts <- cts[rowSums(cts) > 0,]
txdb <- makeTxDbFromGFF("Araport11_GFF3_genes_transposons.gff",format="gff")
txdf <- select(txdb, keys(txdb, "GENEID"), "TXNAME", "GENEID")
tab <- table(txdf$GENEID)
txdf$ntx <- tab[match(txdf$GENEID, names(tab))]
txdf <- txdf[match(rownames(cts), txdf$TXNAME), ]
rownames(txdf) <- NULL
idx <- rownames(cts) %in% txdf$TXNAME
cts.filt <- cts[idx,]
all(rownames(cts.filt) %in% txdf$TXNAME)
all(rownames(cts.filt) %in% txdf$TXNAME)
txdf <- txdf[match(rownames(cts.filt),txdf$TXNAME),]
all(rownames(cts.filt) == txdf$TXNAME)
counts <- data.frame(gene_id=txdf$GENEID,feature_id=txdf$TXNAME,cts.filt)



library(DRIMSeq)
d <- dmDSdata(counts=counts, samples=samples)
d
methods(class=class(d))


n <- 12
n.small <- 6
d <- dmFilter(d,
d

table(table(counts(d)$gene_id))
design_full <- model.matrix(~sample_type, data=DRIMSeq::samples(d))
colnames(design_full)
set.seed(1)
system.time({

  d <- dmPrecision(d, design=design_full)

  d <- dmFit(d, design=design_full)

  d <- dmTest(d, coef="sample_typeVIR")

})i_uu


res <- DRIMSeq::results(d)
head(res)

res.txp <- DRIMSeq::results(d, level="feature")
head(res.txp)

no.na <- function(x) ifelse(is.na(x), 1, x)
res$pvalue <- no.na(res$pvalue)
res.txp$pvalue <- no.na(res.txp$pvalue)
idx <- which(res$adj_pvalue < 0.05)[15]
res[idx,]

plotProportions(d, res$gene_id[idx], "sample_type")

nrow(res)
nrow(res.txp)

pScreen <- res$pvalue
strp <- function(x) substr(x,1,11)
names(pScreen) <- strp(res$gene_id)
pConfirmation <- matrix(res.txp$pvalue, ncol=1)
rownames(pConfirmation) <- strp(res.txp$feature_id)
tx2gene <- res.txp[,c("feature_id", "gene_id")]
for (i in 1:2) tx2gene[,i] <- strp(tx2gene[,i])

BiocManager::install("stageR")
library("stageR")

stageRObj <- stageRTx(pScreen=pScreen, pConfirmation=pConfirmation,pScreenAdjusted=FALSE, tx2gene=tx2gene)
stageRObj <- stageWiseAdjustment(stageRObj, method="dtu", alpha=0.05) 

suppressWarnings({
  drim.padj <- getAdjustedPValues(stageRObj, order=FALSE,

                                      onlySignificantGenes=TRUE)
})

head(drim.padj)
nrow(drim.padj)

res.txp.filt <- DRIMSeq::results(d, level="feature")
smallProportionSD <- function(d, filter=0.1) {

  cts <- as.matrix(subset(counts(d), select=-c(gene_id, feature_id)))

  gene.cts <- rowsum(cts, counts(d)$gene_id)

  total.cts <- gene.cts[match(counts(d)$gene_id, rownames(gene.cts)),]

  props <- cts/total.cts

  propSD <- sqrt(rowVars(props))

  propSD < filter

}

filt <- smallProportionSD(d)
res.txp.filt$pvalue[filt] <- 1
res.txp.filt$adj_pvalue[filt] <- 1
res.txp.filt$pvalue <- no.na(res.txp.filt$pvalue)
pScreen1 <- res$pvalue
strp <- function(x) substr(x,1,11)
names(pScreen1) <- strp(res$gene_id)
pConfirmation1 <- matrix(res.txp.filt$pvalue, ncol=1)
rownames(pConfirmation1) <- strp(res.txp.filt$feature_id)
tx2gene1 <- res.txp.filt[,c("feature_id", "gene_id")]
for (i in 1:2) tx2gene1[,i] <- strp(tx2gene1[,i])

library(stageR)
stageRObj1 <- stageRTx(pScreen=pScreen1, pConfirmation=pConfirmation1,pScreenAdjusted=FALSE, tx2gene=tx2gene1)
stageRObj1 <- stageWiseAdjustment(stageRObj1, method="dtu", alpha=0.05) 

suppressWarnings({

  drim.padj.filt <- getAdjustedPValues(stageRObj1, order=FALSE,

                                      onlySignificantGenes=TRUE)

})

head(drim.padj.filt)
nrow(drim.padj.filt)

DTU <- drim.padj.filt[drim.padj.filt$transcript < 0.05,]

nrow(DTU)
head(DTU)
capture.output(DTU, file="DTU.txt")

BiocManager::install("GOstats")
library("GOstats")

phyper(351,2822,30519,1470,lower.tail=F)

library("VennDiagram")

m6a <- read.delim("DTU/all_m6Agenes.txt", sep="\t",header=FALSE)
rownames(m6a) <- m6a$V1
DTUgenes <- read.delim("DTU/DTU_id_no_na.txt", sep="\t",header=FALSE)
rownames(DTUgenes) <- DTUgenes$V1
v_d <- venn.diagram(x = list("m6A genes" = rownames(m6a),
"DTU genes" = rownames(DTUgenes)), label.col=c("black","red","black"), cat.col="red",cat.pos=1,filename = NULL)
grid.draw(v_d)


